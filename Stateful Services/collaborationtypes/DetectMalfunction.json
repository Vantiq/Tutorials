{
  "active" : true,
  "appType" : true,
  "ars_properties" : {
    "dataVersion" : 5,
    "graph" : {
      "lastZoomRequest" : 0,
      "scale" : 0.6306313264050434,
      "translate" : [ 307.77734076927175, 32.373737124658916 ]
    },
    "groupSettings" : {
      "appGroupOpenHash" : {
        "actions" : true,
        "filters" : true,
        "flowControl" : true,
        "modifiers" : true
      },
      "ctGroupOpenHash" : {
        "actions" : true,
        "mobile" : true
      },
      "ctServiceOpen" : false,
      "serviceGroupOpenHash" : { }
    },
    "paletteWidth" : 170,
    "propertyWidth" : 280
  },
  "ars_relationships" : [ ],
  "assembly" : {
    "SplitBySystemId" : {
      "configuration" : {
        "childStreams" : [ "UpdateState" ],
        "groupBy" : "event.systemId",
        "parentStreams" : [ ]
      },
      "downstreamReferences" : { },
      "pattern" : "SplitByGroup",
      "patternVersion" : 1
    },
    "Transformation" : {
      "configuration" : {
        "childStreams" : [ "SplitBySystemId" ],
        "parentStreams" : [ ],
        "transformInPlace" : false,
        "transformation" : "${transformation}",
        "upsert" : false
      },
      "downstreamReferences" : { },
      "isRoot" : true,
      "pattern" : "Transformation",
      "patternVersion" : 1
    },
    "UpdateState" : {
      "configuration" : {
        "childStreams" : [ "generateAlertMessage" ],
        "imports" : null,
        "outboundBehavior" : "Emit original event",
        "outboundProperty" : null,
        "parentStreams" : [ ],
        "procedure" : {
          "vailScript" : "// If there wasn't a previous value for this id, create a new entry with the systemId\nif (!state) {\n    state = {systemId : event.systemId}\n}\n\n// If this event included a sensor reading, update the stored sensor reading\nif (event[\"${sensorProp}\"]) {\n    state[\"${sensorProp}\"] = event[\"${sensorProp}\"]\n}"
        },
        "schema" : null
      },
      "downstreamReferences" : { },
      "pattern" : "AccumulateState",
      "patternVersion" : 1
    },
    "generateAlertMessage" : {
      "configuration" : {
        "childStreams" : [ "isMalfunctionDetected" ],
        "parameters" : "${parameters}",
        "parentStreams" : [ ],
        "procedure" : "com.vantiq.engines.EngineMonitor.generateAlertMessage",
        "returnBehavior" : "Use Return Value as Outbound event"
      },
      "downstreamReferences" : { },
      "pattern" : "Procedure",
      "patternVersion" : 1
    },
    "isMalfunctionDetected" : {
      "configuration" : {
        "childStreams" : [ ],
        "condition" : "event.alertMsg != null",
        "parentStreams" : [ ],
        "upsert" : false
      },
      "downstreamReferences" : { },
      "pattern" : "Filter",
      "patternVersion" : 1
    }
  },
  "collaboratorRoles" : [ ],
  "componentInterface" : {
    "appOnly" : true,
    "ars_properties" : {
      "category" : "standard",
      "deprecated" : false,
      "description" : "",
      "patternGroup" : "app.component"
    },
    "configurationProperties" : {
      "maxSpeed" : {
        "default" : "45",
        "order" : 0,
        "type" : "Integer"
      },
      "maxTemperature" : {
        "default" : "210",
        "order" : 1,
        "type" : "Integer"
      },
      "sensorProp" : {
        "default" : null,
        "order" : 3,
        "required" : true,
        "type" : "String"
      },
      "transformation" : {
        "default" : {
          "speed" : {
            "expression" : "event.speed",
            "type" : "expression"
          },
          "systemId" : {
            "expression" : "event.systemId",
            "type" : "expression"
          },
          "temperature" : {
            "expression" : "event.temperature",
            "type" : "expression"
          }
        },
        "description" : "A transformation that will be applied to events streaming from the parent node before producing outbound events for consumption by child nodes.",
        "multi" : false,
        "order" : 2,
        "required" : false,
        "type" : "Union",
        "typeChoices" : [ {
          "description" : "A procedure to invoke that will transform the event data.",
          "name" : "Transformation Procedure",
          "parameters" : [ {
            "multi" : false,
            "required" : true,
            "type" : "Object"
          } ],
          "type" : "ArsComponent"
        }, {
          "description" : "Use visual transformations to map inputs to outputs without writing your own transformation procedure.",
          "name" : "Visual Transformation",
          "type" : "ExpressionObject"
        } ]
      }
    },
    "events" : {
      "MalfunctionDetected" : {
        "configurationProperty" : "childStreams",
        "name" : "MalfunctionDetected",
        "schema" : "inherit",
        "taskName" : "isMalfunctionDetected"
      },
      "TransformedEvent" : {
        "configurationProperty" : "childStreams",
        "name" : "TransformedEvent",
        "schema" : "inherit",
        "taskName" : "Transformation"
      }
    },
    "isComponent" : true,
    "name" : "DetectMalfunction",
    "results" : { },
    "runtimeProperties" : [ ],
    "templates" : [ "DetectMalfunction.generate" ]
  },
  "disableBadging" : false,
  "entityRoles" : [ ],
  "isComponent" : true,
  "isEventHandler" : false,
  "keyTypes" : [ "system.collaborations" ],
  "name" : "DetectMalfunction"
}