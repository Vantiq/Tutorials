{
  "active" : true,
  "appType" : true,
  "ars_properties" : {
    "dataVersion" : 5,
    "graph" : {
      "lastZoomRequest" : 0,
      "scale" : 0.8882969506224966,
      "translate" : [ 90.09921568668622, 30.202096321164902 ]
    },
    "groupSettings" : {
      "appGroupOpenHash" : {
        "actions" : true,
        "component" : true,
        "filters" : true,
        "flowControl" : true
      },
      "ctGroupOpenHash" : {
        "actions" : true,
        "mobile" : true
      },
      "ctServiceOpen" : false,
      "serviceGroupOpenHash" : { }
    },
    "paletteWidth" : 170,
    "propertyWidth" : 280
  },
  "assembly" : {
    "AggregateUpdates" : {
      "configuration" : {
        "WriteToDb" : [ "TransformHUD" ],
        "interval" : "5 seconds",
        "parentStreams" : [ ],
        "typeName" : "SystemStatus"
      },
      "downstreamUUIDS" : {
        "WriteToDb" : "c4dd224c-0d68-4e53-b540-8192cdff931d"
      },
      "isComponent" : true,
      "pattern" : "AggregateUpdates",
      "rootTask" : "AggregateUpdates_GetType",
      "uuid" : "fe141e1d-2200-4697-8deb-8e0f399541a9"
    },
    "AggregateUpdates_AccumulateState" : {
      "componentReference" : "AggregateUpdates",
      "configuration" : {
        "childStreams" : [ "AggregateUpdates_Limit" ],
        "enableBadging" : true,
        "outboundBehavior" : "Replace outbound event with state value",
        "parentStreams" : [ "AggregateUpdates_SplitByGroup" ],
        "procedure" : {
          "vailScript" : "// Update the value of state using event.\n\nif (!state) {\n    state = {}\n}\n\nlog.error(\"{}\", [event.typeDef.properties])\n\nfor (prop in event.typeDef.properties) {\n    var propName = prop.getKey()\n    if (event[propName]) {\n        state[propName] = event[propName]\n    }\n}"
        }
      },
      "name" : "AggregateUpdates_AccumulateState",
      "pattern" : "AccumulateState"
    },
    "AggregateUpdates_GetType" : {
      "componentReference" : "AggregateUpdates",
      "configuration" : {
        "childStreams" : [ "AggregateUpdates_SplitByGroup" ],
        "enableBadging" : true,
        "imports" : [ {
          "type" : "Import",
          "value" : "service Utils"
        } ],
        "outboundBehavior" : "Attach state value to outboundProperty",
        "outboundProperty" : "typeDef",
        "parentStreams" : [ "MergeStreams" ],
        "procedure" : {
          "vailScript" : "// Update the value of state using event.\n\nif (!state) {\n    state = Utils.getType(\"SystemStatus\")\n}\n\nevent.typeDef = state"
        }
      },
      "isRoot" : true,
      "name" : "AggregateUpdates_GetType",
      "pattern" : "AccumulateState"
    },
    "AggregateUpdates_Limit" : {
      "componentReference" : "AggregateUpdates",
      "configuration" : {
        "childStreams" : [ "AggregateUpdates_SaveToType" ],
        "enableBadging" : true,
        "interval" : "5 seconds",
        "maxCount" : "1",
        "parentStreams" : [ "AggregateUpdates_AccumulateState" ]
      },
      "name" : "AggregateUpdates_Limit",
      "pattern" : "Limit"
    },
    "AggregateUpdates_SaveToType" : {
      "componentReference" : "AggregateUpdates",
      "configuration" : {
        "childStreams" : [ "TransformHUD" ],
        "enableBadging" : true,
        "parentStreams" : [ "AggregateUpdates_Limit" ],
        "type" : "SystemStatus",
        "upsert" : true
      },
      "downstreamReference" : "WriteToDb",
      "name" : "AggregateUpdates_SaveToType",
      "pattern" : "SaveToType"
    },
    "AggregateUpdates_SplitByGroup" : {
      "componentReference" : "AggregateUpdates",
      "configuration" : {
        "childStreams" : [ "AggregateUpdates_AccumulateState" ],
        "enableBadging" : true,
        "groupBy" : "event.systemId",
        "parentStreams" : [ "AggregateUpdates_GetType" ]
      },
      "name" : "AggregateUpdates_SplitByGroup",
      "pattern" : "SplitByGroup"
    },
    "MergeStreams" : {
      "configuration" : {
        "childStreams" : [ "AggregateUpdates" ],
        "parentStreams" : [ "SpeedReading", "TempReading" ]
      },
      "name" : "MergeStreams",
      "pattern" : "Merge",
      "uuid" : "1f10e0cb-a529-4947-8b58-9fd1ef942e04"
    },
    "SpeedReading" : {
      "configuration" : {
        "childStreams" : [ "MergeStreams" ],
        "inboundResource" : "types",
        "inboundResourceId" : "EngineSpeed",
        "op" : "INSERT",
        "parentStreams" : [ ],
        "schema" : "EngineSpeed",
        "upsert" : false
      },
      "name" : "SpeedReading",
      "pattern" : "EventStream",
      "uuid" : "3b3045d4-eee8-4638-8c14-f67d68e5303c"
    },
    "TempReading" : {
      "configuration" : {
        "childStreams" : [ "MergeStreams" ],
        "inboundResource" : "types",
        "inboundResourceId" : "EngineTemp",
        "op" : "INSERT",
        "parentStreams" : [ ],
        "schema" : "EngineTemp",
        "upsert" : false
      },
      "name" : "TempReading",
      "pattern" : "EventStream",
      "uuid" : "11344ff6-6a4f-4e89-8e37-50fbdb833ef4"
    },
    "TransformHUD" : {
      "configuration" : {
        "childStreams" : [ "UpdateHUD" ],
        "parentStreams" : [ "AggregateUpdates_SaveToType" ],
        "transformation" : {
          "alertMsg" : {
            "expression" : "((event.temperature >= 210) && (event.speed >= 45)) ? \t\"Your engine is overheating, please reduce your speed.\" : \t(((event.temperature >= 210) && (event.speed < 45)) ? \t\"Your engine is overheating: check for a malfunctioning fan or a coolant leak.\" : \"\")",
            "type" : "expression"
          },
          "systemId" : {
            "expression" : "event.systemId",
            "type" : "expression"
          }
        },
        "upsert" : false
      },
      "name" : "TransformHUD",
      "pattern" : "Transformation",
      "uuid" : "0d0e8ab5-8ecf-460a-ae02-4dc346ef086e"
    },
    "UpdateHUD" : {
      "configuration" : {
        "parentStreams" : [ "TransformHUD" ],
        "type" : "SystemHUD",
        "upsert" : true
      },
      "name" : "UpdateHUD",
      "pattern" : "SaveToType",
      "uuid" : "68425a7f-8013-48e9-8feb-21daa80005a5"
    }
  },
  "collaboratorRoles" : [ ],
  "currentState" : {
    "code" : "success"
  },
  "description" : "",
  "disableBadging" : false,
  "entityRoles" : [ ],
  "isComponent" : false,
  "keyTypes" : [ "system.collaborations" ],
  "name" : "EngineMonitor"
}